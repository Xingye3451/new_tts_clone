#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import time
import logging
import argparse

# 设置日志
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("voice_service.log")],
)
logger = logging.getLogger("voice_service_starter")


def check_environment():
    """检查环境变量和目录"""
    # 检查输出目录
    output_dir = os.environ.get("OUTPUT_DIR", "outputs")
    os.makedirs(output_dir, exist_ok=True)
    logger.info(f"输出目录: {output_dir}")

    # 检查模型目录
    model_dir = os.environ.get("MODEL_DIR", "pretrained_models/Spark-TTS-0.5B")
    if not os.path.exists(model_dir):
        logger.warning(f"模型目录不存在: {model_dir}，将在第一次运行时下载")
    else:
        logger.info(f"模型目录: {model_dir}")

    # 检查CUDA
    try:
        import torch

        if torch.cuda.is_available():
            logger.info(f"CUDA可用，设备: {torch.cuda.get_device_name(0)}")
        else:
            logger.warning("CUDA不可用，服务将使用CPU运行，性能可能受影响")
    except ImportError:
        logger.warning("无法导入torch模块，请确保已安装PyTorch")

    # 检查Whisper模型
    whisper_size = os.environ.get("WHISPER_SIZE", "small")
    whisper_dir = os.path.expanduser("/app/whisper_model")
    whisper_model = os.path.join(whisper_dir, f"{whisper_size}.pt")
    if not os.path.exists(whisper_model):
        logger.warning(f"Whisper模型文件不存在: {whisper_model}，将在第一次运行时下载")
    else:
        logger.info(f"Whisper模型: {whisper_model}")

    return True


def generate_grpc_code():
    """生成gRPC代码"""
    from generate_grpc_code import generate_grpc_code

    return generate_grpc_code()


def start_service(port=50051, max_workers=10):
    """启动gRPC服务"""
    try:
        from main_service import serve

        logger.info(f"启动gRPC服务，端口: {port}，工作线程数: {max_workers}")
        serve(port=port, max_workers=max_workers)
        return True
    except Exception as e:
        logger.exception(f"启动服务时发生错误: {e}")
        return False


if __name__ == "__main__":
    # 解析命令行参数
    parser = argparse.ArgumentParser(description="音色合成gRPC服务启动脚本")
    parser.add_argument("--port", type=int, default=50051, help="服务端口，默认50051")
    parser.add_argument("--workers", type=int, default=10, help="工作线程数，默认10")
    args = parser.parse_args()

    # 检查环境
    if not check_environment():
        logger.error("环境检查失败，退出")
        sys.exit(1)

    # 生成gRPC代码
    if not generate_grpc_code():
        logger.error("gRPC代码生成失败，退出")
        sys.exit(1)

    # 创建__init__.py文件，确保可以作为包导入
    grpc_service_dir = os.path.dirname(os.path.abspath(__file__))
    init_file = os.path.join(grpc_service_dir, "__init__.py")
    if not os.path.exists(init_file):
        with open(init_file, "w") as f:
            f.write("# This file is automatically generated\n")
        logger.info("已创建__init__.py文件")

    # 启动服务
    logger.info("准备启动gRPC服务...")

    # 等待2秒，确保所有模块都已准备就绪
    time.sleep(2)

    if not start_service(port=args.port, max_workers=args.workers):
        logger.error("服务启动失败，退出")
        sys.exit(1)
